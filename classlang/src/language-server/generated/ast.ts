/******************************************************************************
 * This file was generated by langium-cli 0.5.0.
 * DO NOT EDIT MANUALLY!
 ******************************************************************************/

/* eslint-disable @typescript-eslint/array-type */
/* eslint-disable @typescript-eslint/no-empty-interface */
import { AstNode, AstReflection, Reference, ReferenceInfo, isAstNode, TypeMetaData } from 'langium';

export type ClassBlock = AttributeChoice | FunctionChoice;

export const ClassBlock = 'ClassBlock';

export function isClassBlock(item: unknown): item is ClassBlock {
    return reflection.isInstance(item, ClassBlock);
}

export type EnumBlock = EnumItem;

export const EnumBlock = 'EnumBlock';

export function isEnumBlock(item: unknown): item is EnumBlock {
    return reflection.isInstance(item, EnumBlock);
}

export interface Association extends AstNode {
}

export const Association = 'Association';

export function isAssociation(item: unknown): item is Association {
    return reflection.isInstance(item, Association);
}

export interface Attribute extends AstNode {
    readonly $container: AttributeChoice;
    name: string
}

export const Attribute = 'Attribute';

export function isAttribute(item: unknown): item is Attribute {
    return reflection.isInstance(item, Attribute);
}

export interface AttributeChoice extends AstNode {
    attributes: Array<Attribute>
}

export const AttributeChoice = 'AttributeChoice';

export function isAttributeChoice(item: unknown): item is AttributeChoice {
    return reflection.isInstance(item, AttributeChoice);
}

export interface Class extends AstNode {
    readonly $container: Model;
    name: string
}

export const Class = 'Class';

export function isClass(item: unknown): item is Class {
    return reflection.isInstance(item, Class);
}

export interface Enum extends AstNode {
    readonly $container: Model;
    name: string
}

export const Enum = 'Enum';

export function isEnum(item: unknown): item is Enum {
    return reflection.isInstance(item, Enum);
}

export interface EnumItem extends AstNode {
    name: string
}

export const EnumItem = 'EnumItem';

export function isEnumItem(item: unknown): item is EnumItem {
    return reflection.isInstance(item, EnumItem);
}

export interface Extension extends AstNode {
    superType: Reference<Class>
}

export const Extension = 'Extension';

export function isExtension(item: unknown): item is Extension {
    return reflection.isInstance(item, Extension);
}

export interface Function extends AstNode {
    readonly $container: FunctionChoice;
    name: string
}

export const Function = 'Function';

export function isFunction(item: unknown): item is Function {
    return reflection.isInstance(item, Function);
}

export interface FunctionChoice extends AstNode {
    functions: Array<Function>
}

export const FunctionChoice = 'FunctionChoice';

export function isFunctionChoice(item: unknown): item is FunctionChoice {
    return reflection.isInstance(item, FunctionChoice);
}

export interface Model extends AstNode {
    classes: Array<Class>
    enums: Array<Enum>
}

export const Model = 'Model';

export function isModel(item: unknown): item is Model {
    return reflection.isInstance(item, Model);
}

export interface TypeDefinition extends AstNode {
    enum: Reference<Enum>
}

export const TypeDefinition = 'TypeDefinition';

export function isTypeDefinition(item: unknown): item is TypeDefinition {
    return reflection.isInstance(item, TypeDefinition);
}

export type ClassLanguageAstType = 'Association' | 'Attribute' | 'AttributeChoice' | 'Class' | 'ClassBlock' | 'Enum' | 'EnumBlock' | 'EnumItem' | 'Extension' | 'Function' | 'FunctionChoice' | 'Model' | 'TypeDefinition';

export class ClassLanguageAstReflection implements AstReflection {

    getAllTypes(): string[] {
        return ['Association', 'Attribute', 'AttributeChoice', 'Class', 'ClassBlock', 'Enum', 'EnumBlock', 'EnumItem', 'Extension', 'Function', 'FunctionChoice', 'Model', 'TypeDefinition'];
    }

    isInstance(node: unknown, type: string): boolean {
        return isAstNode(node) && this.isSubtype(node.$type, type);
    }

    isSubtype(subtype: string, supertype: string): boolean {
        if (subtype === supertype) {
            return true;
        }
        switch (subtype) {
            case AttributeChoice:
            case FunctionChoice: {
                return this.isSubtype(ClassBlock, supertype);
            }
            case EnumItem: {
                return this.isSubtype(EnumBlock, supertype);
            }
            default: {
                return false;
            }
        }
    }

    getReferenceType(refInfo: ReferenceInfo): string {
        const referenceId = `${refInfo.container.$type}:${refInfo.property}`;
        switch (referenceId) {
            case 'Extension:superType': {
                return Class;
            }
            case 'TypeDefinition:enum': {
                return Enum;
            }
            default: {
                throw new Error(`${referenceId} is not a valid reference id.`);
            }
        }
    }

    getTypeMetaData(type: string): TypeMetaData {
        switch (type) {
            case 'AttributeChoice': {
                return {
                    name: 'AttributeChoice',
                    mandatory: [
                        { name: 'attributes', type: 'array' }
                    ]
                };
            }
            case 'FunctionChoice': {
                return {
                    name: 'FunctionChoice',
                    mandatory: [
                        { name: 'functions', type: 'array' }
                    ]
                };
            }
            case 'Model': {
                return {
                    name: 'Model',
                    mandatory: [
                        { name: 'classes', type: 'array' },
                        { name: 'enums', type: 'array' }
                    ]
                };
            }
            default: {
                return {
                    name: type,
                    mandatory: []
                };
            }
        }
    }
}

export const reflection = new ClassLanguageAstReflection();
