"use strict";
/******************************************************************************
 * This file was generated by langium-cli 0.5.0.
 * DO NOT EDIT MANUALLY!
 ******************************************************************************/
Object.defineProperty(exports, "__esModule", { value: true });
exports.reflection = exports.ClassLanguageAstReflection = exports.isTypeDefinition = exports.TypeDefinition = exports.isRelationshipLabel = exports.RelationshipLabel = exports.isRelationshipItem = exports.RelationshipItem = exports.isRelationship = exports.Relationship = exports.isModel = exports.Model = exports.isFunctionChoice = exports.FunctionChoice = exports.isFunction = exports.Function = exports.isExtension = exports.Extension = exports.isEnumItem = exports.EnumItem = exports.isEnumBlock = exports.EnumBlock = exports.isEnum = exports.Enum = exports.isClassBlock = exports.ClassBlock = exports.isClass = exports.Class = exports.isCardinality = exports.Cardinality = exports.isAttributeChoice = exports.AttributeChoice = exports.isAttribute = exports.Attribute = exports.isInheritance = exports.Inheritance = exports.isComposition = exports.Composition = exports.isAssociation = exports.Association = exports.isAggregation = exports.Aggregation = void 0;
/* eslint-disable @typescript-eslint/array-type */
/* eslint-disable @typescript-eslint/no-empty-interface */
const langium_1 = require("langium");
exports.Aggregation = 'Aggregation';
function isAggregation(item) {
    return exports.reflection.isInstance(item, exports.Aggregation);
}
exports.isAggregation = isAggregation;
exports.Association = 'Association';
function isAssociation(item) {
    return exports.reflection.isInstance(item, exports.Association);
}
exports.isAssociation = isAssociation;
exports.Composition = 'Composition';
function isComposition(item) {
    return exports.reflection.isInstance(item, exports.Composition);
}
exports.isComposition = isComposition;
exports.Inheritance = 'Inheritance';
function isInheritance(item) {
    return exports.reflection.isInstance(item, exports.Inheritance);
}
exports.isInheritance = isInheritance;
exports.Attribute = 'Attribute';
function isAttribute(item) {
    return exports.reflection.isInstance(item, exports.Attribute);
}
exports.isAttribute = isAttribute;
exports.AttributeChoice = 'AttributeChoice';
function isAttributeChoice(item) {
    return exports.reflection.isInstance(item, exports.AttributeChoice);
}
exports.isAttributeChoice = isAttributeChoice;
exports.Cardinality = 'Cardinality';
function isCardinality(item) {
    return exports.reflection.isInstance(item, exports.Cardinality);
}
exports.isCardinality = isCardinality;
exports.Class = 'Class';
function isClass(item) {
    return exports.reflection.isInstance(item, exports.Class);
}
exports.isClass = isClass;
exports.ClassBlock = 'ClassBlock';
function isClassBlock(item) {
    return exports.reflection.isInstance(item, exports.ClassBlock);
}
exports.isClassBlock = isClassBlock;
exports.Enum = 'Enum';
function isEnum(item) {
    return exports.reflection.isInstance(item, exports.Enum);
}
exports.isEnum = isEnum;
exports.EnumBlock = 'EnumBlock';
function isEnumBlock(item) {
    return exports.reflection.isInstance(item, exports.EnumBlock);
}
exports.isEnumBlock = isEnumBlock;
exports.EnumItem = 'EnumItem';
function isEnumItem(item) {
    return exports.reflection.isInstance(item, exports.EnumItem);
}
exports.isEnumItem = isEnumItem;
exports.Extension = 'Extension';
function isExtension(item) {
    return exports.reflection.isInstance(item, exports.Extension);
}
exports.isExtension = isExtension;
exports.Function = 'Function';
function isFunction(item) {
    return exports.reflection.isInstance(item, exports.Function);
}
exports.isFunction = isFunction;
exports.FunctionChoice = 'FunctionChoice';
function isFunctionChoice(item) {
    return exports.reflection.isInstance(item, exports.FunctionChoice);
}
exports.isFunctionChoice = isFunctionChoice;
exports.Model = 'Model';
function isModel(item) {
    return exports.reflection.isInstance(item, exports.Model);
}
exports.isModel = isModel;
exports.Relationship = 'Relationship';
function isRelationship(item) {
    return exports.reflection.isInstance(item, exports.Relationship);
}
exports.isRelationship = isRelationship;
exports.RelationshipItem = 'RelationshipItem';
function isRelationshipItem(item) {
    return exports.reflection.isInstance(item, exports.RelationshipItem);
}
exports.isRelationshipItem = isRelationshipItem;
exports.RelationshipLabel = 'RelationshipLabel';
function isRelationshipLabel(item) {
    return exports.reflection.isInstance(item, exports.RelationshipLabel);
}
exports.isRelationshipLabel = isRelationshipLabel;
exports.TypeDefinition = 'TypeDefinition';
function isTypeDefinition(item) {
    return exports.reflection.isInstance(item, exports.TypeDefinition);
}
exports.isTypeDefinition = isTypeDefinition;
class ClassLanguageAstReflection {
    getAllTypes() {
        return ['Aggregation', 'Association', 'Attribute', 'AttributeChoice', 'Cardinality', 'Class', 'ClassBlock', 'Composition', 'Enum', 'EnumBlock', 'EnumItem', 'Extension', 'Function', 'FunctionChoice', 'Inheritance', 'Model', 'Relationship', 'RelationshipItem', 'RelationshipLabel', 'TypeDefinition'];
    }
    isInstance(node, type) {
        return (0, langium_1.isAstNode)(node) && this.isSubtype(node.$type, type);
    }
    isSubtype(subtype, supertype) {
        if (subtype === supertype) {
            return true;
        }
        switch (subtype) {
            case exports.RelationshipItem: {
                return this.isSubtype(exports.Association, supertype) || this.isSubtype(exports.Composition, supertype) || this.isSubtype(exports.Aggregation, supertype) || this.isSubtype(exports.Inheritance, supertype);
            }
            case exports.RelationshipLabel: {
                return this.isSubtype(exports.Association, supertype) || this.isSubtype(exports.Composition, supertype) || this.isSubtype(exports.Aggregation, supertype);
            }
            default: {
                return false;
            }
        }
    }
    getReferenceType(refInfo) {
        const referenceId = `${refInfo.container.$type}:${refInfo.property}`;
        switch (referenceId) {
            case 'Extension:class': {
                return exports.Class;
            }
            case 'RelationshipItem:class': {
                return exports.Class;
            }
            case 'TypeDefinition:enum': {
                return exports.Enum;
            }
            default: {
                throw new Error(`${referenceId} is not a valid reference id.`);
            }
        }
    }
    getTypeMetaData(type) {
        switch (type) {
            case 'ClassBlock': {
                return {
                    name: 'ClassBlock',
                    mandatory: [
                        { name: 'attributes', type: 'array' },
                        { name: 'functions', type: 'array' }
                    ]
                };
            }
            case 'EnumBlock': {
                return {
                    name: 'EnumBlock',
                    mandatory: [
                        { name: 'enumItems', type: 'array' }
                    ]
                };
            }
            case 'Model': {
                return {
                    name: 'Model',
                    mandatory: [
                        { name: 'classes', type: 'array' },
                        { name: 'enums', type: 'array' },
                        { name: 'relationships', type: 'array' }
                    ]
                };
            }
            case 'Relationship': {
                return {
                    name: 'Relationship',
                    mandatory: [
                        { name: 'aggregations', type: 'array' },
                        { name: 'associations', type: 'array' },
                        { name: 'compositions', type: 'array' },
                        { name: 'inheritances', type: 'array' }
                    ]
                };
            }
            default: {
                return {
                    name: type,
                    mandatory: []
                };
            }
        }
    }
}
exports.ClassLanguageAstReflection = ClassLanguageAstReflection;
exports.reflection = new ClassLanguageAstReflection();
//# sourceMappingURL=ast.js.map