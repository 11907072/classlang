"use strict";
/******************************************************************************
 * This file was generated by langium-cli 0.5.0.
 * DO NOT EDIT MANUALLY!
 ******************************************************************************/
Object.defineProperty(exports, "__esModule", { value: true });
exports.reflection = exports.ClassLanguageAstReflection = exports.isTypeDefinition = exports.TypeDefinition = exports.isModel = exports.Model = exports.isFunctionChoice = exports.FunctionChoice = exports.isFunction = exports.Function = exports.isEnumItem = exports.EnumItem = exports.isEnum = exports.Enum = exports.isClass = exports.Class = exports.isAttributeChoice = exports.AttributeChoice = exports.isAttribute = exports.Attribute = exports.isAssociation = exports.Association = exports.isEnumBlock = exports.EnumBlock = exports.isClassBlock = exports.ClassBlock = void 0;
/* eslint-disable @typescript-eslint/array-type */
/* eslint-disable @typescript-eslint/no-empty-interface */
const langium_1 = require("langium");
exports.ClassBlock = 'ClassBlock';
function isClassBlock(item) {
    return exports.reflection.isInstance(item, exports.ClassBlock);
}
exports.isClassBlock = isClassBlock;
exports.EnumBlock = 'EnumBlock';
function isEnumBlock(item) {
    return exports.reflection.isInstance(item, exports.EnumBlock);
}
exports.isEnumBlock = isEnumBlock;
exports.Association = 'Association';
function isAssociation(item) {
    return exports.reflection.isInstance(item, exports.Association);
}
exports.isAssociation = isAssociation;
exports.Attribute = 'Attribute';
function isAttribute(item) {
    return exports.reflection.isInstance(item, exports.Attribute);
}
exports.isAttribute = isAttribute;
exports.AttributeChoice = 'AttributeChoice';
function isAttributeChoice(item) {
    return exports.reflection.isInstance(item, exports.AttributeChoice);
}
exports.isAttributeChoice = isAttributeChoice;
exports.Class = 'Class';
function isClass(item) {
    return exports.reflection.isInstance(item, exports.Class);
}
exports.isClass = isClass;
exports.Enum = 'Enum';
function isEnum(item) {
    return exports.reflection.isInstance(item, exports.Enum);
}
exports.isEnum = isEnum;
exports.EnumItem = 'EnumItem';
function isEnumItem(item) {
    return exports.reflection.isInstance(item, exports.EnumItem);
}
exports.isEnumItem = isEnumItem;
exports.Function = 'Function';
function isFunction(item) {
    return exports.reflection.isInstance(item, exports.Function);
}
exports.isFunction = isFunction;
exports.FunctionChoice = 'FunctionChoice';
function isFunctionChoice(item) {
    return exports.reflection.isInstance(item, exports.FunctionChoice);
}
exports.isFunctionChoice = isFunctionChoice;
exports.Model = 'Model';
function isModel(item) {
    return exports.reflection.isInstance(item, exports.Model);
}
exports.isModel = isModel;
exports.TypeDefinition = 'TypeDefinition';
function isTypeDefinition(item) {
    return exports.reflection.isInstance(item, exports.TypeDefinition);
}
exports.isTypeDefinition = isTypeDefinition;
class ClassLanguageAstReflection {
    getAllTypes() {
        return ['Association', 'Attribute', 'AttributeChoice', 'Class', 'ClassBlock', 'Enum', 'EnumBlock', 'EnumItem', 'Function', 'FunctionChoice', 'Model', 'TypeDefinition'];
    }
    isInstance(node, type) {
        return (0, langium_1.isAstNode)(node) && this.isSubtype(node.$type, type);
    }
    isSubtype(subtype, supertype) {
        if (subtype === supertype) {
            return true;
        }
        switch (subtype) {
            case exports.AttributeChoice:
            case exports.FunctionChoice: {
                return this.isSubtype(exports.ClassBlock, supertype);
            }
            case exports.EnumItem: {
                return this.isSubtype(exports.EnumBlock, supertype);
            }
            default: {
                return false;
            }
        }
    }
    getReferenceType(refInfo) {
        const referenceId = `${refInfo.container.$type}:${refInfo.property}`;
        switch (referenceId) {
            case 'Association:attribute': {
                return exports.Attribute;
            }
            case 'TypeDefinition:enum': {
                return exports.Enum;
            }
            default: {
                throw new Error(`${referenceId} is not a valid reference id.`);
            }
        }
    }
    getTypeMetaData(type) {
        switch (type) {
            case 'AttributeChoice': {
                return {
                    name: 'AttributeChoice',
                    mandatory: [
                        { name: 'attributes', type: 'array' }
                    ]
                };
            }
            case 'FunctionChoice': {
                return {
                    name: 'FunctionChoice',
                    mandatory: [
                        { name: 'functions', type: 'array' }
                    ]
                };
            }
            case 'Model': {
                return {
                    name: 'Model',
                    mandatory: [
                        { name: 'classes', type: 'array' },
                        { name: 'enums', type: 'array' }
                    ]
                };
            }
            default: {
                return {
                    name: type,
                    mandatory: []
                };
            }
        }
    }
}
exports.ClassLanguageAstReflection = ClassLanguageAstReflection;
exports.reflection = new ClassLanguageAstReflection();
//# sourceMappingURL=ast.js.map